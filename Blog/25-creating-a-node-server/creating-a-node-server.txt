The file app.js or server.js is the root file that makes up the nodejs application, so that the nodejs code will execute on a cumputer in the cloud on a server in the end.

Core Modules:
- http, helps with launching a server and sending requests. A node app could also send a request to another server to communicate with each other.
- https, helps with launching a SSL server (encrypted data)
- fs
- path 
- os

When importing your own files always start with a './' for a relative path and a '/' for a absolute path.
It automatically adds .js extension. ithout appending the .js it looks for a global module.

The createServer method takes in an requestListener.
A requestListener is a function that will execute for every incoming request.
This function takes two arguments. 
The request listener receives a request which is of type incomingMessage and a response object.
So in short nodejs automatically gives us some object that represents the incoming request and allows
us to read data from that request and it gives us an object response which we can use to return a response
to whoever sent that request.

This function has to accept these two arguments here and you can again name the arguments however you want.
The first argument is a request which is of type incomingMessage will contain data about the request.
The second argument will help you send a response.

After creating this function we can pass this function reference. So we don't execute it, don't invoke it using a pair pf (parenthese).
Just pass the name to that function because this will simply tell create server 
hey please look for this function with this name and execute it for every incoming request. 
This function will now run for every request that reaches our server which will be started by calling create server.
Instead of passing in the name of the function, we will follow JavaScripts event driven architecture that nodejs uses heavily by using an anonymous function which will have the same 
arguments. 

When we execute the app.js file in the terminal we notice that nothing is printed to the terminal. We don't see console log and that makes sense because we didn't send a request to the server but we don't even know where the server is, 
how do we reach that server, which address does it have?

Well one important thing is missing, this create server method actually returns a server.
So we have to store that in a new variable or constant and I'll use a constant because I'll never overwrite
it, I only create a server once. So now the created server is stored here and now we can use that server and do something with it.

We can use a method on the server called Listen. Listen starts a process where nodejs will not immediately exit our script. Instead it will keep this process running to listen for incoming requests.

Now listen as you can see takes a couple of arguments, optional arguments,
the first one is the port on which you want to listen. Now in production you typically would not fill this
out and it would take the default of port 80. Here on local development we can specify this as 3000 (relatively common). 
We can also define a hostname. By default, this will be the name of the machine this is running on, so for our local machine, this is localhost by default.


When we use a browser to go to localhost:3000 nothing happens because we haven't configured it to return any html page but if you go back to the terminal you will see the request has been logged.
