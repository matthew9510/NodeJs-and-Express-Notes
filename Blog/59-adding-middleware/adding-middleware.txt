Express js is all about adding middleware. Middleware means that an incoming request is automatically 
funneled through a bunch of functions by expressjs. So instead of having one request handler, you 
will actually have a possibility of hooking in multiple functions which the request will go through
until you send a response. This allows you to split your code into multiple blocks or pieces instead
of having one huge function that does everything. This is the pluggable nature of expressjs, where 
you can easily add other third party packages which simply happen to give you such middleware 
functions that you can plug into expressjs and add certain functionalities.  

We can use middleware after creating the app instance and before we pass it to the createServer function.
We will do this by calling a method called use() on the app object.

use() allows us to add a middleware function. It accepts and array of so-called request handlers as well as
has other use cases as well. 

use() will take an function as an argument. This function you pass will be executed for every incoming request
and this function will receive three arguments. The request and the response object as you already know it 
the from nodejs content,but with some extra tricks and a third argument which is the next argument.

request and response have some additional features than node js stuff. 
Next is actually a function, a function that will be passed to this function by expressjs
and this can be confusing because you are passing a function as an argument to the use method and
this function you're passing is receiving yet another function here on the next argument
and this next argument, basically this function you're receiving here has to be executed to allow the
request to travel on to the next middleware.

'''
app.use((req, res, next)=> {
    // some logic...
    next();
})
'''

Now the reason for that is that we have to call next us to allow the request to travel on to the next
middleware in line. So it basically goes from top to bottom through that file you could say, through
all the middleware functions but only if we call next, if we don't call next it just dies,
so if we don't call next, we should actually send back a response because otherwise the request can't
continue its journey, so it will never reach a place where we might send a response. If we don't 
send a response in the last middleware then we will not send a response.

You should call next if you want the request to go to the next function.